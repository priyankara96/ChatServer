package chatserver;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
//import jdk.nashorn.internal.runtime.arrays.ArrayLikeIterator;

/**
 *
 * @author Kalpana
 */
public class ChatClient extends javax.swing.JFrame {

    BufferedReader bufferReader;
    PrintWriter out;
    private DefaultListModel dlm;
    private ArrayList<String> senderList;
    private String clientName;

    /**
     * Creates new form Client
     */
    public ChatClient() {

        initComponents();
        setVisible(true);
        dlm = new DefaultListModel<String>();
        list.setModel(dlm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        chkBox = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        list = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldActionPerformed(evt);
            }
        });

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        chkBox.setText("Brodcast All");
        chkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxActionPerformed(evt);
            }
        });

        list.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {  };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(list);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
        		
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textField)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(chkBox, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE)
            )
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textField)
                    .addComponent(chkBox, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE))
            )
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldActionPerformed
        boolean checked = chkBox.isSelected();
        if (!checked) {
            senderList = new ArrayList<>();
            int selectedClients[] = list.getSelectedIndices();
            int rowCount = dlm.getSize();
            if (selectedClients.length != 0) {
                for (int client : selectedClients) {
                    String name = list.getModel().getElementAt(client).toString();
                    senderList.add(name);
                }
                senderList.add(clientName);
                out.println("ACTIVELISTS " + senderList+"SENDERNAME "+clientName + "MESSAGE " + textField.getText());
                out.println(textField.getText());
                textField.setText("");
            } 
            else {
                JOptionPane.showMessageDialog(this, "Plese Select Senders Name From The List");
            }
        } 
        else {
            out.println("BroadCastMessage " +clientName+"MESSAGE" +textField.getText());
            out.println(textField.getText());
            textField.setText("");
        }


    }
    //GEN-LAST:event_textFieldActionPerformed

    private void chkBoxActionPerformed(java.awt.event.ActionEvent evt) {
    	//GEN-FIRST:event_chkBoxActionPerformed

    }
    //GEN-LAST:event_chkBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        //</editor-fold>
        ChatClient c1 = new ChatClient();
        c1.run();
    }

    private String getServerAddress() {
        return JOptionPane.showInputDialog(this, "Enter IP Address of the Server:", "Welcome to the Chatter", JOptionPane.QUESTION_MESSAGE);

    }

    public String getName() {
        
        return JOptionPane.showInputDialog(this, "Choose a screen name:", "Screen name selection", JOptionPane.PLAIN_MESSAGE);

    }

    public void run() throws IOException {
        String serverAddress = getServerAddress();
        Socket socket = new Socket(serverAddress, 9001);

        bufferReader = new BufferedReader(new InputStreamReader(
                socket.getInputStream()));
        out = new PrintWriter(socket.getOutputStream(), true);

        // Process all messages from server, according to the protocol.
        // TODO: You may have to extend this protocol to achieve task 9 in the lab sheet
        while (true) {

            String line = bufferReader.readLine();
            if (line.startsWith("SUBMITNAME")) {
                clientName = getName();
                out.println(clientName);
                this.setTitle(clientName);
            } 
            else if (line.startsWith("NAMEACCEPTED")) {
                textField.setEditable(true);
            } 
            else if (line.startsWith("MESSAGE")) {
                txtArea.append(line.substring(8) + "\n");
            } 
            else if (line.startsWith("ACTIVELIST")) {
                dlm.removeAllElements();
                String names[] = line.substring(11, line.length() - 1).split(",");
                int i = 0;
                for (String name : names) {
                    dlm.add(i, name);
                    i++;
                }
            }

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    
    private javax.swing.JCheckBox chkBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList list;
    private javax.swing.JTextField textField;
    private javax.swing.JTextArea txtArea;
    
    // End of variables declaration//GEN-END:variables
}
